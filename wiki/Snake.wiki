#summary Descrição da implementação do jogo Snake

= Introdução =

O jogo Snake se trata de um dos mais tradicionais jogos presentes no mundo, onde um segmento de 3 quadrados consecutivos (normalmente são 3, em algumas implementações do jogo mais, menos ou mesmo outras representações que não sejam quadrados) se movimenta pela tela. Esse segmento é chamado de "cobra" (uma alusão ao próprio réptil) e tem como objetivo movimentar-se na tela a procura de quadrados menores os quais são intitulados como "comida". Quando a cobra chega com seu primeiro quadrado em cima da comida, o segmento da própria cobra aumenta em um quadrado. O jogo segue assim até a cobra chocar-se com um quadrado de seu próprio corpo ou com o limite da tela destinado para ela andar.

O jogador tem o controle sobre os movimentos da cobra e visualiza a comida, procurando então comê-la para que o tamanho da cobra aumente, quanto maior a cobra ficar até o final do jogo, maior a pontuação do jogador.

= Detalhes da Implementação =
Os procedimentos de desenho e movimentação, junto com algumas verificações, são feitas no segmento de código chamado "GameLoop" em que é repetido em intervalos de 60 milisegundos. As verificações feitas são de colisão com paredes (verificaColisao), colisão com a própria cobra (autoColisao), de passar pela comida (come) e de teclas lidas pelo teclado (identificaDirecao).

Os procedimentos de atualização de pontuações são feitos, em sua maioria, separado ao restante do controle do jogo. Apenas a rotina de atualização de pontuação atual é feita utilizando-se da procedure "movimentaEDesenha" para atualizar a contagem de quanto tempo passou desde que a última comida apareceu. A rotina de pontuação é separada em três segmentos, são eles:

=== Atualização da pontuação atual ===

A pontuação atual é atualizada a cada vez que o jogador come uma das comidas, sendo feita então um cálculo relacionado a quantos pontos extras ele terá de acordo com o tempo que ele demorou para comer. O cálculo é:

*ValorMax* - valor maximo da razão de bônus

*tempoUltimaComida* - tempo que o jogador demorou para comer a comida

*numeroQuadradosCobra* - número de quadrados que a cobra tem no momento que comeu

*Se (ValorMax - tempoUltimaComida) > 0*

pontuaçãoAtual += (ValorMax - tempoUltimaComida)/2*numeroQuadradosCobra 

*Senão*

pontuacaoAtual += numeroQuadradosCobra 

Essa razão beneficia quem demora pouco tempo até comer a comida gerada pelo jogo, estimulando o jogador a não ficar apenas se movimentando pela tela, mas sim a fazer o propósito do jogo, que é aumentar o número de quadrados da cobra.

=== Atualização das melhores pontuações ===

Após o término do jogo, a variável pontuacaoAtual é comparada com os 5 valores do vetor melhoresPontuacoes (que é ordenado) e é colocada como uma das melhores pontuações dependendo de qual é a colocação que ela fica, isto é, se for a quinta melhor pontuação, ficará na quinta posição do vetor.

Também é pedido um nome ao jogador quando o mesmo consegue uma das 5 melhores pontuações, armazenando tudo posteriormente no arquivo.

=== Leitura e escrita do arquivo de melhores pontuações ===

Ao iniciar o jogo as 5 melhores pontuações são exibidas com os respectivos nomes dos jogadores que as fizeram. O acesso desses dados é feito acessando o arquivo melhoresPontuacoes.txt e cortando os valores do mesmo a cada "/" encontrado e guardando nas variáveis melhoresPontuacoes as pontuações e nas strings nomePontuacao1 até nomePontuacao5 os nomes dos jogadores que fizeram essas pontuações.

A escrita é feita pegando os valores das mesmas variáveis e guardando no arquivo novamente, não esquecendo de colocar o "/" entre elas, para manter o arquivo no mesmo padrão. Foi necessária a criação de uma função que convertesse valores inteiros para string, para que a gravação das pontuações pudesse ser feita corretamente no arquivo.

= Procedures =
== autoColisao ==
Essa procedure tem por objetivo verificar se a cobra colidiu com ela mesma setando a flag colidiu para 1, faz isso comparando o valor do primeiro ponto da cobra com os demais valores do vetor cobraPontos, com o detalhe que o ponto que esta sendo verificado é trocado temporariamente por um valor que não representa uma coordenada na tela para que o primeiro ponto não seja considerado nas comparações.

== geraComida ==
Essa procedure tem por objetivo gerar coordenadas aleatórias para a posição da comida e desenhá-la com a cor amarela definida pela procedure setTextColor. Os números aleatórios são gerados pelas procedures randomize (gera semente) e randomRange (número aleatório dentro da tela). As coordenadas geradas não podem ter o mesmo valor da coordenada de qualquer ponto da cobra, por esse fato é feita uma busca em vetor, através da instrução "repne scasb", para verificar se a comida gerada tem posição diferente da cobra, caso tenha, uma nova comida é gerada.

== verificaColisao ==
Essa é uma procedure que verifica se a cobra colidiu com as paredes da extremidade da tela. Ela define colidiu como 1 quando duas condições são atendidas: o primeiro ponto da cobra estar em uma das extremidades da tela e a cobra estar se movimentando em direção à extremidade em questão.

== identificaDirecao ==
Essa procedure lê o teclado e muda a direção da cobra de acordo com a seta pressionada. Um controle de direção é feito, pois a cobra não pode mudar para a direção contrária a que está; se pudesse, ela estaria colidindo consigo mesma, terminando o jogo.

== movimentaEdesenha ==
Essa procedure é responsável pela lógica de movimentação dos pontos da cobra e pelo desenho dela na tela. Os pontos afetados pela procedure são apenas o primeiro e o último, de forma que o último ponto é apagado e desenhado a frente do primeiro se tornando o novo primeiro ponto, com suas coordenadas atualizadas e a variável cobraIndiceUltimo é atualizada com o índice do novo último ponto da cobra.

== exibeMelhoresPontuacoes ==
Essa procedure exibe as melhores pontuações através do acesso aos dados do arquivo de pontuação, também é a procedure que carrega nas variáveis as pontuações e o nome, para posterior comparação com as pontuações feitas e a atualização do arquivo.

== exibeMensagemErroArquivo ==
Caso o arquivo nao seja aberto corretamente, essa procedure será chamada, exibindo uma mensagem informando o erro.

== offsetNomePontuacoes == 
Procedure que, dado um parâmetro entre 1 e 5 passado em eax, retorna o OFFSET da variavel nomePontuacao correspondente.

Ex: se eax for 2 o OFFSET retornado será o da variável nomePontuacao2

== escreveArquivoPontuacao ==
Escreve os dados de volta no arquivo de pontuação, pegando todos os dados das variáveis de nome e o vetor de valores e armazenando conforme o padrão inicial do arquivo.

== intParaString ==
Função que converte um valor inteiro em uma String.

== atualizaMelhoresPontuacoes ==
Procedure que atualiza as melhores pontuações comparando-as com a pontuação efetuada ao final do jogo.

== atualizaPontuacao ==
Atualiza no vetor a pontuação do jogador, seguindo a fórmula citada acima.

== mostraPontuacaoAtual == 
Atualiza na tela a pontuação do jogador.

== mostraCabecalhoPontuacao ==
Procedure que carrega os limites inferiores da tela e as mensagens de melhor pontuação realizada e pontuação atual (iniciada com 0 nesse instante)