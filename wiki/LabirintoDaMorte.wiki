#labels asm,game
#Descricao do projeto Labirinto da Morte.

= Introdução =

Documentação do jogo Labirinto da Morte, desenvolvido pela disciplina de Laboratório de Arquitetura e Organização de Computadores II.

O objetivo do jogo consiste em um personagem O que percebe que sua mulher L some ao passar de um dia e segue suas pegadas a fim de encontra-la. O jogador deve seguir por vários labirintos obtendo medalhas de prata e ouro para conquistar novos labirintos. 

*Data de criação*: 12/12/2012

*Última modificação*: 22/01/2013

-------------
= Grupo de alunos =

 * Camilo Moreira - 359645
 * George Pagliuso
 * Heitor Chiquito
 * Pedro Augusto Vicente - 407658

-------------
= Desenvolvimento =

O jogo foi construído inicialmente baseado em um PACMAN, que é próximo de um labirinto. Depois, adaptando as funções, fomos chegando mais próximos do que imaginamos inicialmente, onde um personagem anda pelo labirinto com uma visão limitada (que é o nível de dificuldade) do início até o fim para prosseguir com outros detalhes.

Nesta ordem, foram feitos: funções para carregar os labirintos do arquivo para memória, impressão desse arquivo em tela, mudanças de valores dentro da matriz na memória, funções que definem a jogabilidade do jogo (movimento e a visão) e a implementação dos menus. Em seguida, fomos adaptando essas funções para executar outros detalhes dentro dos mapas, e.g., o Minotauro no mapa do Minotauro, cenas iniciais e intermediárias, sistema de pontuação e fases liberadas a partir dessa pontuação.

-------------
= Jogabilidade =

Pelas setas do teclado, você deve andar pela labirinto até encontrar uma saída no menor número possível de passos.

Setas :
movimenta o usuário

Caracteres:
# - parede do labirinto
O - o usuário/jogador
L - a sua namorada sumida/fugitiva
I - indica o início do labirinto. Se optar trocar de labirinto, volte até ele.
F - final do labirinto. 
M - Minotauro. NÃO ENCARE ELE!

Você deve fazer um caminho de I até F de forma que seja a menor possível.

A pontuação é calculada a partir da porcentagem de passos que você deu acima do RECORDE daquele labirinto.

0 a 5% acima do melhor - medalha de ouro
6 a 30% acima do melhor - medalha de prata
31 a 60% acima do melhor - medalha de bronze
61 em diante acima do melhor - sem medalha

Você deve obter medalhas de prata e ouro para proseeguir em outros labirintos.

-------------
= Sobre a implementação = 

Abaixo, a indicação de cada dado na memória com exceção dos caminhos de dados e mensagens:

tamanhoX - numero de colunas dos mapas
tamanhoY - numero de linhas dos mapas
tamanhoM - tamanho total de uma mapa carregado do arquivo
matriz - memoria destinada ao arquivo e a imagens carregadas durante as cenas

posicao - posicao corrente do usuario em um labirinto
posicaoS - posicao de saida de um labirinto
posicaoVelha - onde é salvo a posicao corrente quando a mesma é alterada

direcao - usado para identificar a direcao lida no teclado
mapa - labirinto atual que o usuário está
mapaPossivel - número de mapas que o usuário já liberou
liberado - usado como auxiliar para desenhar o labirinto
visao - tamanho da visão (dificuldade) escolhida pelo usuário
lore - booleano para saber se a cena inicial já foi visualizada

E os procedimentos definidos:

PROC jogaLabirinto: onde está a lógica do jogo com os menus e as chamadas de funções que controlam a jogabilidade. 

PROC escreveMenu, escreveDificuldade, escreveOpcao,: mostra as opções do menu inicial, dificuldades e diz ao usuário opção para escolher, respectivamente. Separados para deixarem o códido mais limpo.

PROC escreveFase: apesar de ser parecida com as funções anteriores, as fases só são carregadas de acordo com o mapaPossível, então exibe apenas as fases disponíveis para serem jogadas.

PROC leLabirinto: carrega o labirinto a ser jogado na memória, chama as funções buscaPosicao e buscaPosicaoSaida

PROC buscaPosicao: como cada labirinto tem entradas diferentes, essa função busca e deixa armazenado na memória a posição do usuário no mapa.

PROC buscaPosicaoS: faz o mesmo que a função anterior, mas para a saída.

PROC liberaMapa: deixa todo o mapa disponível ao usuário. Usada como auxiliar no desenvolvimento inicial.

PROC desliberaMapa: reinicia o mapa liberado.

PROC escreveLabirinto: passa para o procedimento escreveChar para desenhar a parte já percorrida do mapa, mostra o número de passos percorridos do usuário, seu melhor tempo e o recorde (menor possível) do labirinto.

PROC escreveChar: escreve os caracteres definidos no mapa. Para o usuário O, o início I, o fim F, o minotauro M e as paredes. Para as paredes, existe uma lógica que troca o valor da memória * por #, para saber o que já foi percorrido.

PROC movimento: recebe a direção que o usuário escolheu e contém a lógica de movimenta quando possível o usuário no mapa.

PROC verificaMovimento: verifica se o movimento é possível (não irá passar por cima de uma parede). Quando encontra alguns tipos de caracteres, não move, mas executa outras funções tais como mostrar que encontrou um Minotauro ou voltou a tela de escolher as fases.

PROC atualizaLabirinto: atualiza o que mudou no labirinto a cada passo. Aparece novas paredes e minotauros encontrados. O método carrega de acordo com o tamanho da visão.

PROC substituiParede: troca o valor de * por # na memória, para saber que aquela parede já foi descoberta no percurso. Chama a função substituiMino.

PROC substituiMino: idem a função anterior, troca o caractere P por M, quando o minotauro foi descoberto.

PROC verificaBorda: verifica se o caractere lido está dentro ou fora do labirinto. Retorna 0 quando está fora e 1 quando está dentro. Apenas 0Dh e 0Ah devem ser valores fora do labirinto.

PROC mostraPontuacao: função chamada quando um labirinto é completado. Calcula e exibe a medalha que o usuário irá ganhar. Adiciona o valor de mapaPossivel quando boas medalhas são obtidas.

PROC esperaXms: espera o valor de EBX em milisecundos usando a função GetMseconds. Similar a função Delay do biblioteca Irvine, antes desconhecida.

PROC loreInicial: função que mostra a história inicial do jogo. Exibida apenas 1 vez.
-------------

#FIM DO DOCUMENTO